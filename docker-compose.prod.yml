services:
  caddy:
    image: caddy:2
    restart: unless-stopped
    ports:
      - "2019:2019"  # Caddy Admin API
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - app-network
    depends_on:
      - frontend
      - backend

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=caddymanager
      - POSTGRES_USER=caddyuser
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=caddymanager
      - DB_USER=caddyuser
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_TYPE=postgres
      - DB_SSL=false
      - DB_URL=postgresql://caddyuser:${DB_PASSWORD}@db:5432/caddymanager
      - CADDY_API_URL=http://caddy:2019
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      - LOG_LEVEL=info
    expose:
      - "3000"
    volumes:
      - backend_logs:/app/logs
      - backend_metrics:/app/metrics
      - backend_backups:/app/backups
    networks:
      - app-network
    depends_on:
      - db
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=/api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  caddy_data:
    name: caddymanager_prod_caddy_data
  caddy_config:
    name: caddymanager_prod_caddy_config
  postgres_data:
    name: caddymanager_prod_postgres_data
  backend_logs:
    name: caddymanager_prod_backend_logs
  backend_metrics:
    name: caddymanager_prod_backend_metrics
  backend_backups:
    name: caddymanager_prod_backend_backups
